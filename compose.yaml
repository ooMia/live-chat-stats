# Description: Docker compose file for production environment
# Docker automatically imports .env when compose up

services:
  nginx:
    networks: ['front-tier']
    extends:
      file: compose-deps-template.yaml
      service: nginx

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app_prod_container
    env_file:
      - required: true
        path: .env.production.local
    environment:
      NODE_ENV: production
      MYSQL_HOST: mysql
      REDIS_HOST: redis
    expose: ['${APP_PORT:-3000}']
    restart: always
    healthcheck:
      test: ['CMD', 'wget', '-q', '-O', '-', 'http://localhost:3000/health']
      interval: 10s
      timeout: 10s
      retries: 3
    networks: ['front-tier', 'back-tier']
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  mysql:
    volumes: [mysql_data:/var/lib/mysql:rw]
    networks: ['back-tier']
    expose:
      - '${MYSQL_PORT:-3306}'
      - '${MYSQL_XPORT:-33060}'
    secrets: ['root_password']
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/root_password
    extends:
      file: compose-deps-template.yaml
      service: mysql

  redis:
    volumes: [redis_data:/data:rw]
    networks: ['back-tier']
    expose:
      - '${REDIS_PORT:-6379}'
    extends:
      file: compose-deps-template.yaml
      service: redis

networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge

volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_BIND_ROOT:-deps/db}

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_BIND_ROOT:-deps/redis}

secrets:
  root_password:
    file: deps/root_password.txt
